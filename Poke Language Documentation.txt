Poke Language
Version: 1.0.0
Date: July 16, 2025

Introduction
Poke is a simple, interpreted language designed for learning purposes and fun. It features familiar control structures, first-class functions, built-in data types, and a minimal syntax inspired by Python and BASIC and some Pokémon.
Getting Started
Installation
1. Ensure you have Python 3.7+ installed on your system.
2. Place Poke.py in your project directory or any desired location.
3. From your terminal or command prompt, run a .poke script:
  python Poke.py <filename>.poke
REPL Mode
Launch an interactive Poke shell:
python Poke.py  # without arguments opens REPL
Type expressions or statements directly and press Enter to evaluate.

Language Syntax
Comments
* Single-line comments begin with # and extend to the end of the line:
  # This is a comment
Variables
* Declare and assign variables with the mon keyword:
  mon x = 10
mon msg = "Hello, Poke!"
* Variable names may contain letters, digits, and underscores, but must start with a letter.
Data Types
* Integer: 123
* Float: 3.14
* String: Double-quoted, supporting escape sequences (\n, \t, \\, \"):
  mon s = "Line1\nLine2"
* List (Array): Square brackets, comma-separated:
  mon nums = [1, 2, 3, 4]
Operators
* Arithmetic: +, -, *, /, % (modulo), ^ (power)
* Comparison: ==, !=, <, >, <=, >=
* Logical: and, or, not
* String concatenation: +
* List operations:
o Append: append(list, value)
o Pop: pop(list, index)
o Extend: extend(listA, listB)
o Length: len(list) or len(string)
Statements & Expressions
* Separate statements with newlines or semicolons (;).
* Implicit expression evaluation prints nothing; use print(...) to output.
Control Flow
Conditional
if x > 0 then
  print("Positive")
elif x < 0 then
  print("Negative")
else
  print("Zero")
end
Loops
For loop:
for i = 0 to 5 step 1 then
  print(i)
end
While loop:
while n > 1 then
  n = n - 1
end
Functions
* Define functions with rotom, name (optional), argument list, and either -> for single expression or newline+end:
Single-expression function:
rotom add(a, b) -> a + b
mon result = add(2, 3)
Multi-statement function:
rotom greet(name)
  print("Hello, " + name)
end

greet("World")
* Return values:
o Single-expression functions auto-return the expression result.
o Multi-statement functions use return statements:
  rotom max(a, b)
  if a > b then
    return a
  else
    return b
  end
end
Built-in Values & Functions
ValueDescriptionnullRepresents no valuetrueBoolean true (1)falseBoolean false (0)pi3.141592653589793
FunctionArgumentsDescriptionprint(value)valueOutputs to console, returns nullprint_ret(value)valueReturns string representation without printinginput()—Reads a line, returns Stringinput_int()—Reads and returns Numberclear()—Clears the consoleis_number(v)vtrue if Numberis_string(v)vtrue if Stringis_list(v)vtrue if Listis_rotom(v)vtrue if Functionappend(list, value)list, valueAppends element, returns nullpop(list, index)list, indexRemoves and returns elementextend(listA, listB)listA, listBConcatenates lists, returns nulllen(x)x (list or string)Length as Numberrun(fn)fn (String)Executes external .poke script, returns nullError Handling
* Syntax errors report unexpected tokens and line numbers.
* Runtime errors include “Division by zero”, undefined variable, index out of bounds, etc., with tracebacks.
Examples
Factorial:
rotom fact(n) ->
  if n == 0 then 1 else n * fact(n - 1) end

print(fact(5))  # 120
Fibonacci sequence:
mon fibs = [0, 1]
for i = 2 to 10 then
  append(fibs, fibs[i-1] + fibs[i-2])
end
print(fibs)

For further details, consult the source code or contact the author.
